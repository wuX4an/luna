"use strict";(self.webpackChunkluna_website=self.webpackChunkluna_website||[]).push([[614],{2204:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"reference/std/json","title":"std:json","description":"The std:json module provides functions to encode Lua tables into JSON strings and decode JSON strings into Lua tables.","source":"@site/../docs/reference/std/json.md","sourceDirName":"reference/std","slug":"/reference/std/json","permalink":"/luna/docs/reference/std/json","draft":false,"unlisted":false,"editUrl":"https://github.com/wux4an/luna/tree/main/docs/../docs/reference/std/json.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Standard Library","permalink":"/luna/docs/reference/std/"},"next":{"title":"std:math","permalink":"/luna/docs/reference/std/math"}}');var t=s(4848),l=s(8453);const i={},d="std",c={},o=[{value:"Functions",id:"functions",level:2},{value:"<code>json.encode(tbl: table): string</code>",id:"jsonencodetbl-table-string",level:3},{value:"<code>json.decode(str: string): table</code>",id:"jsondecodestr-string-table",level:3},{value:"Notes",id:"notes",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsxs)(n.h1,{id:"std",children:["std",":json"]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"std:json"})," module provides functions to ",(0,t.jsx)(n.strong,{children:"encode Lua tables into JSON strings"})," and ",(0,t.jsx)(n.strong,{children:"decode JSON strings into Lua tables"}),".\nIt is useful for data interchange, API communication, and configuration parsing."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"jsonencodetbl-table-string",children:(0,t.jsx)(n.code,{children:"json.encode(tbl: table): string"})}),"\n",(0,t.jsx)(n.p,{children:"Encodes a Lua table into a JSON string. Nested tables and arrays are supported."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tbl"})," ",(0,t.jsx)(n.em,{children:"(table)"}),": the Lua table to encode."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"(string)"}),": the JSON representation of the table."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local json = require("std:json")\n\nlocal tbl = { name = "Alice", age = 30, active = true }\nlocal str = json.encode(tbl)\nprint(str)\n-- {"name":"Alice","age":30,"active":true}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"jsondecodestr-string-table",children:(0,t.jsx)(n.code,{children:"json.decode(str: string): table"})}),"\n",(0,t.jsx)(n.p,{children:"Decodes a JSON string into a Lua table. Nested objects and arrays are converted recursively."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"})," ",(0,t.jsx)(n.em,{children:"(string)"}),": the JSON string to decode."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"(table)"}),": the Lua table representation of the JSON string."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local json = require("std:json")\n\nlocal str = \'{"users":[{"name":"Alice"},{"name":"Bob"}],"active":true}\'\nlocal tbl = json.decode(str)\n\nprint(tbl.active)          -- true\nprint(tbl.users[1].name)   -- Alice\nprint(tbl.users[2].name)   -- Bob\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Arrays in JSON are converted to Lua tables with ",(0,t.jsx)(n.strong,{children:"1-based integer keys"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Nested objects and arrays are ",(0,t.jsx)(n.strong,{children:"recursively converted"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Invalid JSON strings will raise an error."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example of error handling:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local json = require("std:json")\n\nlocal ok, err = pcall(function()\n    local tbl = json.decode(\'{"invalid_json": }\')\nend)\n\nprint(ok, err)\n-- false    failed to decode JSON string: ...\n'})}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var r=s(6540);const t={},l=r.createContext(t);function i(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);