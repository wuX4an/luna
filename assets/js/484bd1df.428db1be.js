"use strict";(self.webpackChunkluna_website=self.webpackChunkluna_website||[]).push([[562],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const r={},c=s.createContext(r);function i(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(c.Provider,{value:n},e.children)}},8927:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/std/test","title":"test","description":"The std:test module provides a lightweight testing framework for Lua.","source":"@site/../docs/reference/std/test.md","sourceDirName":"reference/std","slug":"/reference/std/test","permalink":"/luna/docs/reference/std/test","draft":false,"unlisted":false,"editUrl":"https://github.com/wux4an/luna/tree/main/docs/../docs/reference/std/test.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"std:tablex","permalink":"/luna/docs/reference/std/tablex"},"next":{"title":"std:time","permalink":"/luna/docs/reference/std/time"}}');var r=t(4848),c=t(8453);const i={},l=void 0,d={},a=[{value:"Recommended way to define tests",id:"recommended-way-to-define-tests",level:2},{value:"How to run the tests",id:"how-to-run-the-tests",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>test.run(name: string, fn: function)</code>",id:"testrunname-string-fn-function",level:3},{value:"<code>test(name: string, fn: function)</code>",id:"testname-string-fn-function",level:3},{value:"<code>test.expect(value)</code>",id:"testexpectvalue",level:3},{value:"<code>test.describe(name: string, fn: function)</code>",id:"testdescribename-string-fn-function",level:3},{value:"<code>test.each(cases: table, fn: function)</code>",id:"testeachcases-table-fn-function",level:3},{value:"Complete Example",id:"complete-example",level:2}];function o(e){const n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["#std",":test"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"std:test"})," module provides a lightweight testing framework for Lua.\nIt supports assertions, named tests, test grouping with ",(0,r.jsx)(n.code,{children:"describe"}),", and parameterized tests with ",(0,r.jsx)(n.code,{children:"each"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"recommended-way-to-define-tests",children:"Recommended way to define tests"}),"\n",(0,r.jsxs)(n.p,{children:["You can define tests in a way that they ",(0,r.jsx)(n.strong,{children:"only execute when requested"}),", using the global ",(0,r.jsx)(n.code,{children:"__TESTS__"})," table."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Define tests\n__TESTS__ = __TESTS__ or {}\ntable.insert(__TESTS__, function()\n    local test = require("std:test")\n    test.run("simple test", function()\n        return test.expect(5):to_equal(4)\n    end)\nend)\n\n-- Execute tests conditionally (optional)\nif os.getenv("LUNA_RUN_TESTS") then\n    for _, t in ipairs(__TESTS__ or {}) do t() end\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Tests are registered but ",(0,r.jsx)(n.strong,{children:"do not run by default"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"You can execute all tests in a controlled environment."}),"\n",(0,r.jsx)(n.li,{children:"Keeps production code clean and backwards-compatible."}),"\n",(0,r.jsx)(n.li,{children:"Cleaned by the builder."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-to-run-the-tests",children:"How to run the tests"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Set the environment variable and run your script:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"LUNA_RUN_TESTS=1 luna main.lua\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Or using the CLI command:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"luna test main.lua\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["This will set ",(0,r.jsx)(n.code,{children:"LUNA_RUN_TESTS"})," internally and execute all registered tests."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"testrunname-string-fn-function",children:(0,r.jsx)(n.code,{children:"test.run(name: string, fn: function)"})}),"\n",(0,r.jsx)(n.p,{children:"Runs a named test."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," ",(0,r.jsx)(n.em,{children:"(string)"}),": the name of the test."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," ",(0,r.jsx)(n.em,{children:"(function)"}),": a function returning a test expectation."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local test = require("std:test")\n\n-- Simple test\ntest.run("simple test", function()\n    return test.expect(5):to_equal(4)  -- Expect 5 to equal 4\nend)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"testname-string-fn-function",children:(0,r.jsx)(n.code,{children:"test(name: string, fn: function)"})}),"\n",(0,r.jsxs)(n.p,{children:["Shorthand inline test, equivalent to ",(0,r.jsx)(n.code,{children:"test.run"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Inline test\ntest("inline test", function()\n    return test.expect(42):to_equal(41)\nend)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"testexpectvalue",children:(0,r.jsx)(n.code,{children:"test.expect(value)"})}),"\n",(0,r.jsx)(n.p,{children:"Creates an expectation object to assert values."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Methods:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:":to_equal(expected)"})," \u2014 asserts that the value equals ",(0,r.jsx)(n.code,{children:"expected"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Direct expectation\ntest.expect(2):to_equal(2)  -- This test passes\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"testdescribename-string-fn-function",children:(0,r.jsx)(n.code,{children:"test.describe(name: string, fn: function)"})}),"\n",(0,r.jsx)(n.p,{children:"Groups multiple related tests under a description."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," ",(0,r.jsx)(n.em,{children:"(string)"}),": the description for the group."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," ",(0,r.jsx)(n.em,{children:"(function)"}),": contains multiple ",(0,r.jsx)(n.code,{children:"test.run"})," calls or other assertions."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'test.describe("basic math", function()\n    test.run("addition", function()\n        return test.expect(1 + 2):to_equal(3)\n    end)\n    test.run("multiplication", function()\n        return test.expect(2 * 3):to_equal(5)\n    end)\nend)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"testeachcases-table-fn-function",children:(0,r.jsx)(n.code,{children:"test.each(cases: table, fn: function)"})}),"\n",(0,r.jsx)(n.p,{children:"Runs parameterized tests for each case in a table."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cases"})," ",(0,r.jsx)(n.em,{children:"(table)"}),": an array of test case tables."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," ",(0,r.jsx)(n.em,{children:"(function)"}),": function receiving a case object and returning an expectation."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'test.describe("Parameterized multiplication", function()\n    test.each({\n        { a = 2, b = 3, expected = 6, name = "2 * 3 = 6" },\n        { a = 5, b = 5, expected = 25, name = "5 * 5 = 25" },\n    }, function(case)\n        local res = case.a * case.b\n        return test.expect(res):to_equal(case.expected)\n    end)\nend)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Register tests\n__TESTS__ = __TESTS__ or {}\ntable.insert(__TESTS__, function()\n    local test = require("std:test")\n    test.run("simple test", function()\n        return test.expect(5):to_equal(4)  -- Fail\n    end)\n    test("inline test", function()\n        return test.expect(42):to_equal(41)  -- Fail\n    end)\n    test.expect(2):to_equal(2)  -- Pass\n    test.describe("basic math", function()\n        test.run("addition", function() return test.expect(1 + 2):to_equal(3) end)\n        test.run("multiplication", function() return test.expect(2 * 3):to_equal(5) end)\n    end)\n    test.describe("Parameterized multiplication", function()\n        test.each({\n            { a = 2, b = 3, expected = 6, name = "2 * 3 = 6" },\n            { a = 5, b = 5, expected = 25, name = "5 * 5 = 25" },\n        }, function(case)\n            local res = case.a * case.b\n            return test.expect(res):to_equal(case.expected)\n        end)\n    end)\nend)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);