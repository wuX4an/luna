"use strict";(self.webpackChunkluna_website=self.webpackChunkluna_website||[]).push([[692],{5832:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/std/env","title":"std:env","description":"The std:env module provides functions to load, read, and modify environment variables from Lua.","source":"@site/docs/reference/std/env.md","sourceDirName":"reference/std","slug":"/reference/std/env","permalink":"/luna/docs/reference/std/env","draft":false,"unlisted":false,"editUrl":"https://github.com/wux4an/luna/tree/main/docs/docs/reference/std/env.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"std:crypto","permalink":"/luna/docs/reference/std/crypto"},"next":{"title":"std:http","permalink":"/luna/docs/reference/std/http"}}');var i=s(4848),l=s(8453);const t={},d="std",o={},c=[{value:"Functions",id:"functions",level:2},{value:"<code>env.load(filename: string): boolean</code>",id:"envloadfilename-string-boolean",level:3},{value:"<code>env.get(key: string): string?</code>",id:"envgetkey-string-string",level:3},{value:"<code>env.set(key: string, value: string): boolean</code>",id:"envsetkey-string-value-string-boolean",level:3},{value:"Notes",id:"notes",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"std",children:["std",":env"]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"std:env"})," module provides functions to ",(0,i.jsx)(n.strong,{children:"load, read, and modify environment variables"})," from Lua.\nIt supports loading variables from ",(0,i.jsx)(n.code,{children:".env"})," files, getting values, and setting new variables in memory and in the system environment."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h3,{id:"envloadfilename-string-boolean",children:(0,i.jsx)(n.code,{children:"env.load(filename: string): boolean"})}),"\n",(0,i.jsxs)(n.p,{children:["Loads variables from a ",(0,i.jsx)(n.code,{children:".env"})," file into memory and the system environment."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filename"})," ",(0,i.jsx)(n.em,{children:"(string)"}),": path to the ",(0,i.jsx)(n.code,{children:".env"})," file."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"true"})," if the file was loaded successfully."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local env = require("std:env")\n\n-- Load variables from .env file\nlocal ok = env.load(".env")\nif ok then\n    print("Variables loaded successfully")\nend\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"envgetkey-string-string",children:(0,i.jsx)(n.code,{children:"env.get(key: string): string?"})}),"\n",(0,i.jsx)(n.p,{children:"Retrieves the value of a loaded environment variable."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"})," ",(0,i.jsx)(n.em,{children:"(string)"}),": the name of the variable."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"(string?)"})," the variable value if it exists, or ",(0,i.jsx)(n.code,{children:"nil"})," otherwise."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local env = require("std:env")\n\n-- Get API key\nlocal api_key = env.get("API_KEY")\nprint("API_KEY:", api_key)\n-- API_KEY: 1234567890abcdef\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"envsetkey-string-value-string-boolean",children:(0,i.jsx)(n.code,{children:"env.set(key: string, value: string): boolean"})}),"\n",(0,i.jsxs)(n.p,{children:["Sets or updates an environment variable ",(0,i.jsx)(n.strong,{children:"in memory and in the system environment"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"})," ",(0,i.jsx)(n.em,{children:"(string)"}),": the name of the variable."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," ",(0,i.jsx)(n.em,{children:"(string)"}),": the value to assign."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"true"})," on success."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This does ",(0,i.jsx)(n.strong,{children:"not"})," modify the ",(0,i.jsx)(n.code,{children:".env"})," file on disk; the change exists only during program execution."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local env = require("std:env")\n\n-- Define or update a variable\nenv.set("DEBUG", "true")\nprint("DEBUG:", env.get("DEBUG"))\n-- DEBUG: true\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:".env"})," files to manage configuration variables for your application."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"load()"})," automatically updates the system environment (",(0,i.jsx)(n.code,{children:"os.setenv"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"set()"})," is JIT: changes last only during the program runtime. For persistent changes, you need to modify the ",(0,i.jsx)(n.code,{children:".env"})," file manually."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var r=s(6540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);