"use strict";(self.webpackChunkluna_website=self.webpackChunkluna_website||[]).push([[770],{3246:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/std/sqlite","title":"std:sqlite","description":"The std:sqlite module provides an easy-to-use interface to SQLite databases from Lua.","source":"@site/docs/reference/std/sqlite.md","sourceDirName":"reference/std","slug":"/reference/std/sqlite","permalink":"/luna/docs/reference/std/sqlite","draft":false,"unlisted":false,"editUrl":"https://github.com/wux4an/luna/tree/main/docs/docs/reference/std/sqlite.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"std:random","permalink":"/luna/docs/reference/std/random"},"next":{"title":"std:tablex","permalink":"/luna/docs/reference/std/tablex"}}');var t=s(4848),l=s(8453);const o={},d="std",i={},c=[{value:"Functions",id:"functions",level:2},{value:"<code>sqlite.open(path: string): (db, err)</code>",id:"sqliteopenpath-string-db-err",level:3},{value:"<code>db:exec(sql: string): (ok, err)</code>",id:"dbexecsql-string-ok-err",level:3},{value:"<code>db:transaction(fn: function): (ok, err)</code>",id:"dbtransactionfn-function-ok-err",level:3},{value:"<code>db:query(sql: string): (rows, err)</code>",id:"dbquerysql-string-rows-err",level:3},{value:"<code>db:close()</code>",id:"dbclose",level:3},{value:"Complete Example:",id:"complete-example",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsxs)(n.h1,{id:"std",children:["std",":sqlite"]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"std:sqlite"})," module provides an easy-to-use interface to SQLite databases from Lua.\nIt supports creating databases, executing SQL statements, performing transactions, and iterating over query results."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"sqliteopenpath-string-db-err",children:(0,t.jsx)(n.code,{children:"sqlite.open(path: string): (db, err)"})}),"\n",(0,t.jsxs)(n.p,{children:["Opens a SQLite database at the given path. Use ",(0,t.jsx)(n.code,{children:'":memory:"'})," for an in-memory database."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local sqlite = require("std:sqlite")\nlocal db, err = sqlite.open(":memory:")\nassert(db, err)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"dbexecsql-string-ok-err",children:(0,t.jsx)(n.code,{children:"db:exec(sql: string): (ok, err)"})}),"\n",(0,t.jsxs)(n.p,{children:["Executes an SQL statement without returning rows (e.g., ",(0,t.jsx)(n.code,{children:"CREATE"}),", ",(0,t.jsx)(n.code,{children:"INSERT"}),", ",(0,t.jsx)(n.code,{children:"UPDATE"}),")."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"db:exec([[\n  CREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL\n  );\n]])\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"dbtransactionfn-function-ok-err",children:(0,t.jsx)(n.code,{children:"db:transaction(fn: function): (ok, err)"})}),"\n",(0,t.jsx)(n.p,{children:"Executes multiple SQL statements atomically inside a transaction."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fn"})," receives a transaction object ",(0,t.jsx)(n.code,{children:"tx"})," to run multiple ",(0,t.jsx)(n.code,{children:"tx:exec()"})," calls."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"db:transaction(function(tx)\n    tx:exec(\"INSERT INTO users (name) VALUES ('Ana')\")\n    tx:exec(\"INSERT INTO users (name) VALUES ('Luis')\")\nend)\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"dbquerysql-string-rows-err",children:(0,t.jsx)(n.code,{children:"db:query(sql: string): (rows, err)"})}),"\n",(0,t.jsxs)(n.p,{children:["Executes a query returning rows (e.g., ",(0,t.jsx)(n.code,{children:"SELECT"}),")."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rows"})," is an iterator object with methods:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rows:next() -> table?"})," \u2014 fetch the next row or ",(0,t.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rows:close()"})," \u2014 close the iterator."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local rows, err = db:query("SELECT id, name FROM users ORDER BY id")\nwhile true do\n    local row = rows:next()\n    if not row then break end\n    print(string.format("ID=%d, Name=%s", row.id, row.name))\nend\nrows:close()\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"dbclose",children:(0,t.jsx)(n.code,{children:"db:close()"})}),"\n",(0,t.jsx)(n.p,{children:"Closes the database connection."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"db:close()\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"complete-example",children:"Complete Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local sqlite = require("std:sqlite")\n\n-- Open an in-memory database\nlocal db, err = sqlite.open(":memory:")\nassert(db, err)\n\n-- Create a table\ndb:exec([[\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL\n);\n]])\n\n-- Insert data inside a transaction\ndb:transaction(function(tx)\n    tx:exec("INSERT INTO users (name) VALUES (\'Ana\')")\n    tx:exec("INSERT INTO users (name) VALUES (\'Luis\')")\n    tx:exec("INSERT INTO users (name) VALUES (\'Carlos\')")\nend)\n\n-- Query and display users\nlocal rows = db:query("SELECT id, name FROM users ORDER BY id")\nprint("=== Users in the table ===")\nwhile true do\n    local row = rows:next()\n    if not row then break end\n    print(string.format("ID=%d, NAME=%s", row.id, row.name))  -- Print each user\n-- ID=1, Name=Ana\n-- ID=2, Name=Luis\n-- ID=3, Name=Carlos\nend\nrows:close()\n\n-- Count total users\nlocal countRows = db:query("SELECT COUNT(*) AS total FROM users")\nlocal countRow = countRows:next()\ncountRows:close()\nprint("\\n=== Total users ===")\nprint("TOTAL USERS:", countRow.total)\n-- Total users:    3\n\n-- Close the database\ndb:close()\n'})}),"\n",(0,t.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var r=s(6540);const t={},l=r.createContext(t);function o(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);